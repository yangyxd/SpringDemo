<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required 
        @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
    <context:annotation-config />

    <!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service -->
    <context:component-scan base-package="com.yxd.example.bean">
        <context:include-filter type="annotation"
            expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。 DefaultAnnotationHandlerMapping 
        annotation-driven HandlerMapping -->

    <!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
    <mvc:annotation-driven />

    <!-- 静态资源处理， css， js， imgs -->
    <mvc:resources mapping="/resources/**" location="/resources/" />

    <!-- 配置路径扩展名映射的媒体类型 -->
    <bean name="pathExtensionContentNegotiationStrategy"  
        class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">
       <constructor-arg>
          <props>
              <prop key="json">application/json</prop>
              <prop key="xml">application/xml</prop>
              <prop key="htm">text/html</prop>
              <prop key="rss">application/rss+xml</prop>
              <prop key="atom">application/atom+xml</prop>
          </props>
        </constructor-arg>
    </bean>
    
    <!-- 配置映射媒体类型的策略 -->  
    <bean name="mvcContentNegotiationManager"  
        class="org.springframework.web.accept.ContentNegotiationManager">  
        <constructor-arg>  
            <list>  
                <ref bean="pathExtensionContentNegotiationStrategy" />  
            </list>  
        </constructor-arg>  
    </bean>
    
    <!-- 配置方法级别的@RequestMapping处理器 -->  
    <bean name="requestMappingHandlerMapping"  
        class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">  
        <property name="order" value="0" />  
        <property name="contentNegotiationManager" ref="mvcContentNegotiationManager" />  
    </bean>
    
    <!-- 配置数据转换服务，默认使用格式化数据转换服务，可以对日期和数字进行格式化 -->  
    <bean name="conversionService"  
        class="org.springframework.format.support.DefaultFormattingConversionService">  
        <constructor-arg index="0">  
            <null></null>  
        </constructor-arg>  
        <constructor-arg index="1">  
            <value>true</value>  
        </constructor-arg>  
    </bean>

    <!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
            value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsps/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!--200*1024*1024即200M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="209715200" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="resolveLazily" value="true" />
    </bean>

</beans>